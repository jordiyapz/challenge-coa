; Simple example
; Writes Hello World to the output

	JMP start
hello: DB "Hello World!" ; Variable
       DB 0	; String terminator
numerator: 	DB 50		; Pembilang
denumerator:	DB 0		; Penyebut
errormsg: 	DB "ERROR! Divide by 0"
	DB 0					; terminator

start:	MOV D, 232	; Pointer ke output
	MOV B, [denumerator]
	CMP B, 0
	JZ error
	MOV C, 0	; Counter
	MOV A, [numerator]
	CALL theloop
	DEC C
	CMP A, 0
	JNZ getremainder	
	MOV B, 48
	ADD A, B
	MOV [D], A
	INC D
	ADD C, B
	MOV [D], C
	HLT

getremainder:
	ADD A, B
	RET

error:
	MOV C, errormsg
	CALL print
	HLT

theloop:
	INC C	
	SUB A, B
	JA theloop
	RET

print:			; print(C:*from, D:*to)
	PUSH A
	PUSH B
	MOV B, 0
.loop:
	MOV A, [C]	; Get char from var
	MOV [D], A	; Write to output
	INC C
	INC D  
	CMP B, [C]	; Check if end
	JNZ .loop	; jump if not

	POP B
	POP A
	RET

#######################################################################

#######################################################################

JMP debug

flag1:		DB 0
errormsg:	DB "ERROR! Div by 0"
		DB 0
pembilang:	DB 20
penyebut: 	DB 3
q:		DB "q:" 
		DB 0
r:		DB "r:" 
		DB 0

debug:	MOV C, 50
	MOV flag1, 2
	#CALL printnum
	HLT

main:	MOV D, 232	; point to output
	MOV B, [penyebut]
	CMP B, 0
	JZ printErr
	MOV A, [pembilang]
	CALL divide
	call printAns
	HLT	

printAns:
	MOV C, q
	CALL print
	MOV C, A
	CALL printnum
	MOV [D], 32	; print space
	INC D
	MOV C, r
	CALL print
	MOV C, B
	CALL printnum
	RET

printErr:
	MOV C, errormsg
	CALL print
	HLT

divide:			; divide register A by B
	PUSH C
	MOV C, 0	; set counter	
	
.loopdiv:
	INC C
	SUB A, B
	JNBE .loopdiv		; A > B
	CALL .check		; A != 0
	MOV B, A
	MOV A, C
	POP C
	RET

.check:
	CMP A, 0
	JNZ .getrem
	RET

.getrem:
	ADD A, B
	DEC C
	RET

printnum:
	PUSH A
	PUSH B
	MOV B, 100

.loopPrintNum:
	PUSH B
	MOV A, C
	CALL divide

	PUSH B
	CALL .checkpart
	POP C

	POP A
	MOV B, 10
	CALL divide
	MOV B, A
	CMP B, 1
	JNZ .loopPrintNum

	POP B
	POP A
	RET

.checkpart:
	CMP A, 0
	JZ .printpart		; if a != 0
	RET
	
.printpart:
	ADD C, 48
	MOV [D], C
	INC D
	RET

print: 
	PUSH A
	PUSH B
	MOV B, 0	; Terminating char

.printloop:
	MOV A, [C]
	MOV [D], A
	INC C
	INC D
	CMP B, [C]
	JNZ .printloop

	POP B
	POP A
	RET

######################################################################




JMP debug

flag1:		DB 0
errormsg:	DB "ERROR! Div by 0"
		DB 0
pembilang:	DB 20
penyebut: 	DB 3
q:		DB "q:" 
		DB 0
r:		DB "r:" 
		DB 0

debug:	MOV D, 232
	MOV C, 214
	CALL printnum
	HLT

main:	MOV D, 232	; point to output
	MOV B, [penyebut]
	CMP B, 0
	JZ printErr
	MOV A, [pembilang]
	CALL divide
	call printAns
	HLT	

printAns:
	MOV C, q
	CALL print
	MOV C, A
	CALL printnum
	MOV [D], 32	; print space
	INC D
	MOV C, r
	CALL print
	MOV C, B
	CALL printnum
	RET

printErr:
	MOV C, errormsg
	CALL print
	HLT

divide:			; divide register A by B
	PUSH C
	MOV C, 0	; set counter	
	
.loopdiv:
	INC C
	SUB A, B
	JNBE .loopdiv		; A > B
	CALL .check		; A != 0
	MOV B, A
	MOV A, C
	POP C
	RET

.check:
	CMP A, 0
	JNZ .getrem
	RET

.getrem:
	ADD A, B
	DEC C
	RET

printnum:
	PUSH A
	PUSH B
	MOV B, 100

.loopPrintNum:
	PUSH B
	MOV A, C
	CALL divide
	PUSH C
	MOV C, A
	CALL .printpart
	POP C
	POP B
	MUL B
	SUB C, A
	MOV A, B
	MOV B, 10
	CALL divide
	MOV B, A
	CMP B, 1
	JNZ .loopPrintNum

	POP B
	POP A
	RET

.checkpart:
	CMP A, 0
	JZ .printpart		; if a != 0
	RET
	
.printpart:
	PUSH C
	ADD C, 48
	MOV [D], C
	INC D
	POP C
	RET

print: 
	PUSH A
	PUSH B
	MOV B, 0	; Terminating char

.printloop:
	MOV A, [C]
	MOV [D], A
	INC C
	INC D
	CMP B, [C]
	JNZ .printloop

	POP B
	POP A
	RET
